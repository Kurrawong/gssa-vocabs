trigger:
  branches:
    include:
      - main

jobs:
  - deployment: vocabs_dev_deployment
    environment: vocabs-dev
    pool:
      vmImage: "ubuntu-latest"
    variables:
      - group: vocabs-dev
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: CmdLine@2
              displayName: "Install Taskfile"
              inputs:
                script: |
                  sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin
                  echo '##vso[task.prependpath]~/.local/bin'
                  task --version

            - task: CmdLine@2
              displayName: "Install uv"
              inputs:
                script: |
                  curl -LsSf https://astral.sh/uv/install.sh | sh
                  echo '##vso[task.prependpath]~/.local/bin'
                  uv --version

            - task: CmdLine@2
              displayName: "Install python"
              inputs:
                script: |
                  uv install python@$(PYTHON_VERSION)
                  python --version

            - task: CmdLine@2
              displayName: "Install kurra"
              inputs:
                script: |
                  uv tool install kurra
                  kurra --version

            - task: CmdLine@2
              displayName: "Get IP address of runner"
              inputs:
                script: |
                  curl ifconfig.me

            - task: DownloadSecureFile@1
              name: sshKey
              displayName: "Download SSH Key"
              inputs:
                secureFile: "bastion_dev_id_rsa"

            - task: CmdLine@2
              displayName: "Set up SSH keys for bastion access"
              inputs:
                script: |
                  mkdir -p ~/.ssh
                  # Copy the secure file to the proper location
                  cp $(sshKey.secureFilePath) ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  ssh-keyscan -H $(BASTION_HOST) >> ~/.ssh/known_hosts

            - task: CmdLine@2
              displayName: "Set up SSH tunnel to Fuseki"
              inputs:
                script: |
                  echo "Target Fuseki host: $(FUSEKI_DOMAIN_NAME)"

                  # Start SSH tunnel in background (using port 443 for HTTPS)
                  ssh -i ~/.ssh/id_rsa -L 8443:$(FUSEKI_DOMAIN_NAME):443 -N -f $(BASTION_USER)@$(BASTION_HOST)

                  # Test the connection
                  echo "Testing if tunnel port is open..."
                  if ! timeout 10 bash -c "until nc -z localhost 8443; do sleep 1; done"; then
                    echo "##vso[task.logissue type=error]SSH tunnel port 8443 is not accessible after 10 seconds"
                    # Try to get more diagnostic information
                    echo "SSH process status:"
                    ps -ef | grep ssh | grep 8443 || true
                    echo "SSH tunnel may have failed. Checking SSH process output:"
                    ssh -i ~/.ssh/id_rsa -L 8443:$(FUSEKI_DOMAIN_NAME):443 -v $(BASTION_USER)@$(BASTION_HOST) 2>&1 | head -20 || true
                    echo "##vso[task.complete result=Failed;]"
                    exit 1
                  fi
                  echo "SSH tunnel established successfully!"

                  # For debugging only - show running SSH processes
                  ps -ef | grep ssh

            - task: CmdLine@2
              displayName: "Test database connection through SSH tunnel"
              inputs:
                script: |
                  curl -k -u '$(FUSEKI_USERNAME):$(FUSEKI_PASSWORD)' https://localhost:8443/$/ping

            - task: CmdLine@2
              displayName: "Upload vocabularies"
              inputs:
                script: |
                  kurra file upload vocabularies/ 'https://localhost:8443/$(FUSEKI_DATASET)' --username '$(FUSEKI_USERNAME)' --password '$(FUSEKI_PASSWORD)' --insecure

            - task: CmdLine@2
              displayName: "Cleanup SSH tunnel"
              condition: always()
              inputs:
                script: |
                  # Kill any SSH tunnels matching our port pattern
                  pkill -f "ssh.*8443" || true
                  echo "SSH tunnel cleanup attempted"
